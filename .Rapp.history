mean_male
eigen(cov_male)
eigen(cov_male)$vectors[,1]
male_pc1 <- as.matrix(eigen(cov_male)$vectors[,1], 3, 1)
male_pc1
female_pc1 <- as.matrix(eigen(cov_female)$vectors[,1], 3, 1)
cov_female
mean_female
cov_female <- cov(female_turtle, female_turtle)
cov_female
female_pc1 <- as.matrix(eigen(cov_female)$vectors[,1], 3, 1)
female_pc1
male_turtle
male_pc1 %*% t(male_turtle)
t(male_pc1) %*% t(male_turtle)
male_volumes <- t(male_pc1) %*% t(male_turtle)
female_volumes
female_volumes <- t(female_pc1) %*% t(female_turtle)
female_volumes
boxplot(male_volumes, female_volumes)
female_volumes <- t(female_pc1) %*% t(female_turtle) %>% as.matrix(ncol = 1)
female_volumes
female_volumes <- as.matrix(t(female_pc1) %*% t(female_turtle), 24, 1)
female_volumes
typeof(female_volumes)
female_volumes <- as.matrix(t(female_pc1) %*% t(female_turtle), 1, 24)
female_volumes
as.matrix(female_volumes, 24, 1)
as.dataframe(male_volumes, female_volumes)
as.data.frame(male_volumes, female_volumes)
male_volumes
male_volumes <- t(male_pc1) %*% t(male_turtle)#
female_volumes <- t(female_pc1) %*% t(female_turtle)
data_frame(male_volumes, female_volumes)
typeof(male_volumes)
typeof(female_volumes)
dim(male_volumes)
dim(female_volumes)
dim(as.vector(female_volues))
dim(as.vector(female_volumes))
as.vector(female_volumes)
male_volumes <- t(male_pc1) %*% t(male_turtle) %>% as.vector()#
female_volumes <- t(female_pc1) %*% t(female_turtle) %>% as.vector()
data_frame(male_volumes, female_volumes)
volume <- data_frame(male_volumes, female_volumes)#
#
ggplot(volume) + boxplot()
library(ggplot2)
volume <- data_frame(male_volumes, female_volumes)#
#
ggplot(volume) + boxplot()
boxplot(volume)
qplot(volume, type = "boxplot")
qplot(volume, geom = "boxplot")
male_volumes <- t(male_pc1) %*% t(male_turtle) %>% as.vector()#
female_volumes <- t(female_pc1) %*% t(female_turtle) %>% as.vector()#
#
volume <- data_frame(male_volumes, female_volumes)#
#
boxplot(volume)
det(matrix(c(1, 2, 3, 4), 2, 2))
?det
library(MMST)
data(wine)
wine <- as_data_frame(wine) %>% dplyr::select(-classdigit)
wine
manova(wine)
library(MASS)
manova(lda(class ~ ., wine))
lda(class ~., wine)
library(cart)
library(CART)
library(nnet)
??nnet
?nnet
data(wine)
library(MMST)
data(wine)
head(wine)
library(dplyr)
wine <- wine %>% dplyr::select(-classdigit)
wine_x <- dplyr::select(wine, -class)
wine_y <- dplyr::select(wine, class)
nnet(wine_x, wine_y)
nnet(wine_x)
?nnet
nnet(wine_x, wine_y, size = 1)
nnet(wine_x, wine_y, size = 3)
nnet(wine_x, wine_y, size = length)
?nnet
library(rrr)
pca(wine_x)
data(turtle)
data(turtles)
turtles
lda(sex ~ ., turtles)
MASS::lda(sex ~ ., turtles)
pca(turtles)
turtles_x <- turtles %>% dplyr::select(-sex)
pca(turtles)
turtles
pca(turtles_x)
pca(turtles_x)$A
eigens(turtles)
eigens(turtles_x)
eigen(turtles_x)
eigen(cov(turtle_x, turtle_x))
eigen(cov(turtles_x, turtles_x))
eigen(cov(turtles_x, turtles_x))$values[1,2]
eigen(cov(turtles_x, turtles_x))$values[1]
eigen(cov(turtles_x, turtles_x))$values[1:2]
eigen(cov(turtles_x, turtles_x))$values[1:3]
eigen(cov(turtles_x, turtles_x))$values[1:4]
eigen(cov(turtles_x, turtles_x))$values[1:3]
eigen(cov(turtles_x, turtles_x))$values[1:]
pca_rank_trace <- function(x){#
    eigenvecs <- pca(x)$A#
    eigens <- eigen(cov(x, x))#
    full_rank <- dim(eigens)$vectors[2]#
        delta_C <- function(t){#
            sqrt(1 - t / full_rank)#
    }#
    delta_residuals <- function(t){#
        sqrt((eigens$values[(t+1):full_rank])^2 / (eigens$values)^2)#
    }#
    pca_rank_trace_x <- c()#
    pca_rank_trace_y <- c()#
    for(1 in i:full_rank){#
        pca_rank_trace_x[i] <- delta_C(i)#
        pca_rank_trace_y[i] <- delta_residuals(i)#
    }#
    dplyr::data_frame(delta_C = pca_rank_trace_x,#
                      delta_residuals = pca_rank_trace_y)#
}
pca_rank_trace <- function(x){#
    eigenvecs <- pca(x)$A#
    eigens <- eigen(cov(x, x))#
    full_rank <- dim(eigens$vectors)[2]#
        delta_C <- function(t){#
            sqrt(1 - t / full_rank)#
    }#
    delta_residuals <- function(t){#
        sqrt((eigens$values[(t+1):full_rank])^2 / (eigens$values)^2)#
    }#
    pca_rank_trace_x <- c()#
    pca_rank_trace_y <- c()#
    for(1 in i:full_rank){#
        pca_rank_trace_x[i] <- delta_C(i)#
        pca_rank_trace_y[i] <- delta_residuals(i)#
    }#
    dplyr::data_frame(delta_C = pca_rank_trace_x,#
                      delta_residuals = pca_rank_trace_y)#
}
pca_rank_trace <- function(x){#
    eigenvecs <- pca(x)$A#
    eigenvecs#
#    eigens <- eigen(cov(x, x))#
#    full_rank <- dim(eigens$vectors)[2]#
#    delta_C <- function(t){#
#        sqrt(1 - t / full_rank)#
#    }#
#    delta_residuals <- function(t){#
#        sqrt((eigens$values[(t+1):full_rank])^2 / (eigens$values)^2)#
#    }#
#    pca_rank_trace_x <- c()#
#    pca_rank_trace_y <- c()#
#    for(1 in i:full_rank){#
#        pca_rank_trace_x[i] <- delta_C(i)#
#        pca_rank_trace_y[i] <- delta_residuals(i)#
#    }#
#    dplyr::data_frame(delta_C = pca_rank_trace_x,#
#                      delta_residuals = pca_rank_trace_y)#
}
pca_rank_trace(turtles_x)
pca_rank_trace <- function(x){#
    eigenvecs <- pca(x)$A#
    eigens <- eigen(cov(x, x))#
    eigens#
#    full_rank <- dim(eigens$vectors)[2]#
#    delta_C <- function(t){#
#        sqrt(1 - t / full_rank)#
#    }#
#    delta_residuals <- function(t){#
#        sqrt((eigens$values[(t+1):full_rank])^2 / (eigens$values)^2)#
#    }#
#    pca_rank_trace_x <- c()#
#    pca_rank_trace_y <- c()#
#    for(1 in i:full_rank){#
#        pca_rank_trace_x[i] <- delta_C(i)#
#        pca_rank_trace_y[i] <- delta_residuals(i)#
#    }#
#    dplyr::data_frame(delta_C = pca_rank_trace_x,#
#                      delta_residuals = pca_rank_trace_y)#
}
pca_rank_trace(turtles_x)
pca_rank_trace <- function(x){#
    eigenvecs <- pca(x)$A#
    eigens <- eigen(cov(x, x))#
    full_rank <- dim(eigens$vectors)[2]#
    full_rank#
#    delta_C <- function(t){#
#        sqrt(1 - t / full_rank)#
#    }#
#    delta_residuals <- function(t){#
#        sqrt((eigens$values[(t+1):full_rank])^2 / (eigens$values)^2)#
#    }#
#    pca_rank_trace_x <- c()#
#    pca_rank_trace_y <- c()#
#    for(1 in i:full_rank){#
#        pca_rank_trace_x[i] <- delta_C(i)#
#        pca_rank_trace_y[i] <- delta_residuals(i)#
#    }#
#    dplyr::data_frame(delta_C = pca_rank_trace_x,#
#                      delta_residuals = pca_rank_trace_y)#
}
pca_rank_trace(turtles_x)
pca_rank_trace <- function(x){#
    eigenvecs <- pca(x)$A#
    eigens <- eigen(cov(x, x))#
    full_rank <- dim(eigens$vectors)[2]#
    delta_C <- function(t){#
        sqrt(1 - t / full_rank)#
    }#
    delta_C(2)#
#    delta_residuals <- function(t){#
#        sqrt((eigens$values[(t+1):full_rank])^2 / (eigens$values)^2)#
#    }#
#    pca_rank_trace_x <- c()#
#    pca_rank_trace_y <- c()#
#    for(1 in i:full_rank){#
#        pca_rank_trace_x[i] <- delta_C(i)#
#        pca_rank_trace_y[i] <- delta_residuals(i)#
#    }#
#    dplyr::data_frame(delta_C = pca_rank_trace_x,#
#                      delta_residuals = pca_rank_trace_y)#
}
pca_rank_trace(turtles_x)
pca_rank_trace <- function(x){#
    eigenvecs <- pca(x)$A#
    eigens <- eigen(cov(x, x))#
    full_rank <- dim(eigens$vectors)[2]#
    delta_C <- function(t){#
        sqrt(1 - t / full_rank)#
    }#
    delta_C(1)#
#    delta_residuals <- function(t){#
#        sqrt((eigens$values[(t+1):full_rank])^2 / (eigens$values)^2)#
#    }#
#    pca_rank_trace_x <- c()#
#    pca_rank_trace_y <- c()#
#    for(1 in i:full_rank){#
#        pca_rank_trace_x[i] <- delta_C(i)#
#        pca_rank_trace_y[i] <- delta_residuals(i)#
#    }#
#    dplyr::data_frame(delta_C = pca_rank_trace_x,#
#                      delta_residuals = pca_rank_trace_y)#
}
pca_rank_trace(turtles_x)
pca_rank_trace <- function(x){#
    eigenvecs <- pca(x)$A#
    eigens <- eigen(cov(x, x))#
    full_rank <- dim(eigens$vectors)[2]#
    delta_C <- function(t){#
        sqrt(1 - t / full_rank)#
    }#
    delta_residuals <- function(t){#
        sqrt((eigens$values[(t+1):full_rank])^2 / (eigens$values)^2)#
    }#
    list(delta_residuals(1), delta_C(1))#
#    pca_rank_trace_x <- c()#
#    pca_rank_trace_y <- c()#
#    for(1 in i:full_rank){#
#        pca_rank_trace_x[i] <- delta_C(i)#
#        pca_rank_trace_y[i] <- delta_residuals(i)#
#    }#
#    dplyr::data_frame(delta_C = pca_rank_trace_x,#
#                      delta_residuals = pca_rank_trace_y)#
}
pca_rank_trace(turtles_x)
pca_rank_trace <- function(x){#
    eigenvecs <- pca(x)$A#
    eigens <- eigen(cov(x, x))#
    full_rank <- dim(eigens$vectors)[2]#
    delta_C <- function(t){#
        sqrt(1 - t / full_rank)#
    }#
    delta_residuals <- function(t){#
        sqrt((eigens$values[(t+1):full_rank])^2 / (eigens$values)^2)#
    }#
    list(delta_residuals(1), delta_residuals(2), delta_residuals(3))#
#    pca_rank_trace_x <- c()#
#    pca_rank_trace_y <- c()#
#    for(1 in i:full_rank){#
#        pca_rank_trace_x[i] <- delta_C(i)#
#        pca_rank_trace_y[i] <- delta_residuals(i)#
#    }#
#    dplyr::data_frame(delta_C = pca_rank_trace_x,#
#                      delta_residuals = pca_rank_trace_y)#
}
pca_rank_trace(turtles_x)
pca_rank_trace <- function(x){#
    eigenvecs <- pca(x)$A#
    eigens <- eigen(cov(x, x))#
    full_rank <- dim(eigens$vectors)[2]#
    delta_C <- function(t){#
        sqrt(1 - t / full_rank)#
    }#
    delta_residuals <- function(t){#
        sqrt((eigens$values[(t+1):full_rank])^2 / (eigens$values)^2)#
    }#
    eigens$values#
#    pca_rank_trace_x <- c()#
#    pca_rank_trace_y <- c()#
#    for(1 in i:full_rank){#
#        pca_rank_trace_x[i] <- delta_C(i)#
#        pca_rank_trace_y[i] <- delta_residuals(i)#
#    }#
#    dplyr::data_frame(delta_C = pca_rank_trace_x,#
#                      delta_residuals = pca_rank_trace_y)#
}
pca_rank_trace(turtles_x)
pca_rank_trace(turtles_x)^2
pca_rank_trace <- function(x){#
    eigenvecs <- pca(x)$A#
    eigens <- eigen(cov(x, x))#
    full_rank <- dim(eigens$vectors)[2]#
    delta_C <- function(t){#
        sqrt(1 - t / full_rank)#
    }#
    delta_residuals <- function(t){#
        sqrt((sum(eigens$values[(t+1):full_rank])^2) / sum((eigens$values))^2)#
    }#
    list(delta_residuals(1), (delta_residuals(2), (delta_residuals(3))#
#    pca_rank_trace_x <- c()#
#    pca_rank_trace_y <- c()#
#    for(1 in i:full_rank){#
#        pca_rank_trace_x[i] <- delta_C(i)#
#        pca_rank_trace_y[i] <- delta_residuals(i)#
#    }#
#    dplyr::data_frame(delta_C = pca_rank_trace_x,#
#                      delta_residuals = pca_rank_trace_y)#
}
pca_rank_trace <- function(x){#
    eigenvecs <- pca(x)$A#
    eigens <- eigen(cov(x, x))#
    full_rank <- dim(eigens$vectors)[2]#
    delta_C <- function(t){#
        sqrt(1 - t / full_rank)#
    }#
    delta_residuals <- function(t){#
        sqrt((sum(eigens$values[(t+1):full_rank])^2) / sum((eigens$values))^2)#
    }#
    list(delta_residuals(1), delta_residuals(2), delta_residuals(3))#
#    pca_rank_trace_x <- c()#
#    pca_rank_trace_y <- c()#
#    for(1 in i:full_rank){#
#        pca_rank_trace_x[i] <- delta_C(i)#
#        pca_rank_trace_y[i] <- delta_residuals(i)#
#    }#
#    dplyr::data_frame(delta_C = pca_rank_trace_x,#
#                      delta_residuals = pca_rank_trace_y)#
}
pca_rank_trace(turtles_x)
pca_rank_trace <- function(x){#
    eigenvecs <- pca(x)$A#
    eigens <- eigen(cov(x, x))#
    full_rank <- dim(eigens$vectors)[2]#
    delta_C <- function(t){#
        sqrt(1 - t / full_rank)#
    }#
    delta_residuals <- function(t){#
        sqrt((sum(eigens$values[(t+1):full_rank])^2) / sum((eigens$values))^2)#
    }#
    pca_rank_trace_x <- c()#
    pca_rank_trace_y <- c()#
#    for(1 in i:full_rank){#
#        pca_rank_trace_x[i] <- delta_C(i)#
#        pca_rank_trace_y[i] <- delta_residuals(i)#
#    }#
#    dplyr::data_frame(delta_C = pca_rank_trace_x,#
                                        #                      delta_residuals = pca_rank_trace_y)#
    list(pca_rank_trace_x, pca_rank_trace_y)#
}
pca_rank_trace(turtles_x)
pca_rank_trace <- function(x){#
    eigenvecs <- pca(x)$A#
    eigens <- eigen(cov(x, x))#
    full_rank <- dim(eigens$vectors)[2]#
    delta_C <- function(t){#
        sqrt(1 - t / full_rank)#
    }#
    delta_residuals <- function(t){#
        sqrt((sum(eigens$values[(t+1):full_rank])^2) / sum((eigens$values))^2)#
    }#
    pca_rank_trace_x <- c()#
    pca_rank_trace_y <- c()#
    for(1 in i:full_rank){#
        pca_rank_trace_x[i] <- delta_C(i)#
        pca_rank_trace_y[i] <- delta_residuals(i)#
    }#
    dplyr::data_frame(delta_C = pca_rank_trace_x,#
    delta_residuals = pca_rank_trace_y)#
}
pca_rank_trace <- function(x){#
    eigenvecs <- pca(x)$A#
    eigens <- eigen(cov(x, x))#
    full_rank <- dim(eigens$vectors)[2]#
    delta_C <- function(t){#
        sqrt(1 - t / full_rank)#
    }#
    delta_residuals <- function(t){#
        sqrt((sum(eigens$values[(t+1):full_rank])^2) / sum((eigens$values))^2)#
    }#
    pca_rank_trace_x <- c()#
    pca_rank_trace_y <- c()#
    for(1 in i:full_rank){#
        pca_rank_trace_x[i] <- delta_C(i)#
        #pca_rank_trace_y[i] <- delta_residuals(i)#
    }#
    dplyr::data_frame(delta_C = pca_rank_trace_x)#,#
    #delta_residuals = pca_rank_trace_y)#
}
pca_rank_trace <- function(x){#
    eigenvecs <- pca(x)$A#
    eigens <- eigen(cov(x, x))#
    full_rank <- dim(eigens$vectors)[2]#
    delta_C <- function(t){#
        sqrt(1 - t / full_rank)#
    }#
    delta_residuals <- function(t){#
        sqrt((sum(eigens$values[(t+1):full_rank])^2) / sum((eigens$values))^2)#
    }#
    pca_rank_trace_x <- c()#
    pca_rank_trace_y <- c()#
    for(i in 1:full_rank){#
        pca_rank_trace_x[i] <- delta_C(i)#
        #pca_rank_trace_y[i] <- delta_residuals(i)#
    }#
    dplyr::data_frame(delta_C = pca_rank_trace_x)#,#
    #delta_residuals = pca_rank_trace_y)#
}
π
pca_rank_trace(turtles_x)
pca_rank_trace <- function(x){#
    eigenvecs <- pca(x)$A#
    eigens <- eigen(cov(x, x))#
    full_rank <- dim(eigens$vectors)[2]#
    delta_C <- function(t){#
        sqrt(1 - t / full_rank)#
    }#
    delta_residuals <- function(t){#
        sqrt((sum(eigens$values[(t+1):full_rank])^2) / sum((eigens$values))^2)#
    }#
    pca_rank_trace_x <- c()#
    pca_rank_trace_y <- c()#
    for(i in 1:full_rank){#
        pca_rank_trace_x[i] <- delta_C(i)#
        #pca_rank_trace_y[i] <- delta_residuals(i)#
    }#
    dplyr::data_frame(delta_C = pca_rank_trace_x),#
    delta_residuals = pca_rank_trace_y)#
}
pca_rank_trace <- function(x){#
    eigenvecs <- pca(x)$A#
    eigens <- eigen(cov(x, x))#
    full_rank <- dim(eigens$vectors)[2]#
    delta_C <- function(t){#
        sqrt(1 - t / full_rank)#
    }#
    delta_residuals <- function(t){#
        sqrt((sum(eigens$values[(t+1):full_rank])^2) / sum((eigens$values))^2)#
    }#
    pca_rank_trace_x <- c()#
    pca_rank_trace_y <- c()#
    for(i in 1:full_rank){#
        pca_rank_trace_x[i] <- delta_C(i)#
        pca_rank_trace_y[i] <- delta_residuals(i)#
    }#
    dplyr::data_frame(delta_C = pca_rank_trace_x),#
                      delta_residuals = pca_rank_trace_y)#
}
pca_rank_trace <- function(x){#
    eigenvecs <- pca(x)$A#
    eigens <- eigen(cov(x, x))#
    full_rank <- dim(eigens$vectors)[2]#
    delta_C <- function(t){#
        sqrt(1 - t / full_rank)#
    }#
    delta_residuals <- function(t){#
        sqrt((sum(eigens$values[(t+1):full_rank])^2) / sum((eigens$values))^2)#
    }#
    pca_rank_trace_x <- c()#
    pca_rank_trace_y <- c()#
    for(i in 1:full_rank){#
        pca_rank_trace_x[i] <- delta_C(i)#
        pca_rank_trace_y[i] <- delta_residuals(i)#
    }#
    dplyr::data_frame(delta_C = pca_rank_trace_x,#
                      delta_residuals = pca_rank_trace_y)#
}
pca_rank_trace(turtles_x)
pca_rank_trace <- function(x){#
    eigenvecs <- pca(x)$A#
    eigens <- eigen(cov(x, x))#
    full_rank <- dim(eigens$vectors)[2]#
    delta_C <- function(t){#
        sqrt(1 - t / full_rank)#
    }#
    delta_residuals <- function(t){#
        sqrt((sum(eigens$values[(t+1):full_rank])^2) / sum((eigens$values))^2)#
    }#
    pca_rank_trace_x <- c()#
    pca_rank_trace_y <- c()#
    for(i in 1:full_rank){#
        pca_rank_trace_x[i] <- delta_C(i)#
        pca_rank_trace_y[i] <- delta_residuals(i)#
    }#
    pca_rank_trace_y[length(pca_rank_trace_y)] <- 0#
    dplyr::data_frame(delta_C = pca_rank_trace_x,#
                      delta_residuals = pca_rank_trace_y)#
}
pca_rank_trace(turtles_x)
plot(pca_rank_trace(turtles_x))
pca_rank_trace <- function(x){#
    eigenvecs <- pca(x)$A#
    eigens <- eigen(cov(x, x))#
    full_rank <- dim(eigens$vectors)[2]#
    delta_C <- function(t){#
        sqrt(1 - t / full_rank)#
    }#
    delta_residuals <- function(t){#
        sqrt((sum(eigens$values[(t+1):full_rank])^2) / sum((eigens$values))^2)#
    }#
    pca_rank_trace_x <- c()#
    pca_rank_trace_y <- c()#
    for(i in 1:full_rank){#
        pca_rank_trace_x[i] <- delta_C(i)#
        pca_rank_trace_y[i] <- delta_residuals(i)#
    }#
    pca_rank_trace_y[length(pca_rank_trace_y)] <- 0#
    pca_rank_trace_x[1] <- 1#
    pca_rank_trace_y[1] <- 1#
    dplyr::data_frame(delta_C = pca_rank_trace_x,#
                      delta_residuals = pca_rank_trace_y)#
}
plot(pca_rank_trace(turtles_x))
pca_rank_trace <- function(x){#
    eigenvecs <- pca(x)$A#
    eigens <- eigen(cov(x, x))#
    full_rank <- dim(eigens$vectors)[2]#
    delta_C <- function(t){#
        sqrt(1 - t / full_rank)#
    }#
    delta_residuals <- function(t){#
        sqrt((sum(eigens$values[(t+1):full_rank])^2) / sum((eigens$values))^2)#
    }#
    pca_rank_trace_x <- c()#
    pca_rank_trace_y <- c()#
    for(i in 1:full_rank){#
        pca_rank_trace_x[i] <- delta_C(i)#
        pca_rank_trace_y[i] <- delta_residuals(i)#
    }#
    pca_rank_trace_y[length(pca_rank_trace_y)] <- 0#
    dplyr::data_frame(c(1, delta_C = pca_rank_trace_x),#
                      c(1, delta_residuals = pca_rank_trace_y))#
}
plot(pca_rank_trace(turtles_x))
pca_rank_trace(turtles_x)
pca_rank_trace <- function(x){#
    eigenvecs <- pca(x)$A#
    eigens <- eigen(cov(x, x))#
    full_rank <- dim(eigens$vectors)[2]#
    delta_C <- function(t){#
        sqrt(1 - t / full_rank)#
    }#
    delta_residuals <- function(t){#
        sqrt((sum(eigens$values[(t+1):full_rank])^2) / sum((eigens$values))^2)#
    }#
    pca_rank_trace_x <- c()#
    pca_rank_trace_y <- c()#
    for(i in 1:full_rank){#
        pca_rank_trace_x[i] <- delta_C(i)#
        pca_rank_trace_y[i] <- delta_residuals(i)#
    }#
    pca_rank_trace_y[length(pca_rank_trace_y)] <- 0#
    dplyr::data_frame(delta_C = c(1, pca_rank_trace_x),#
                      delta_residuals = c(1, pca_rank_trace_y))#
}
pca_rank_trace(turtles_x)
pca_rank_trace(turtles_x) ->a
1:dim(a)[1]
0:dim(a)[1]
0:dim(a)[3 - 1]
pca_rank_trace_plot(x){#
    rt <- pca_rank_trace(x)#
    ggplot2::ggplot(rt, aes(x = delta_C,#
                            y = delta_residuals,#
                            label = 0:(dim(rt)[1] - 1))) +#
        ggplot2::lims(x = c(0,1), y = c(0,1)) +#
            ggplot2::geom_line(color = "red") +#
            ggplot2::geom_text(check_overlap = TRUE, size = 5) +#
            ggplot2::labs(x = "dC", y = "dE") +#
            ggplot2::ggtitle(expression(paste("Rank Trace Plot for ",#
				 Theta^(0),#
				 " to ",#
				 Theta^(s) )))#
}
pca_rank_trace_plot <- function(x){#
    rt <- pca_rank_trace(x)#
    ggplot2::ggplot(rt, aes(x = delta_C,#
                            y = delta_residuals,#
                            label = 0:(dim(rt)[1] - 1))) +#
        ggplot2::lims(x = c(0,1), y = c(0,1)) +#
            ggplot2::geom_line(color = "red") +#
            ggplot2::geom_text(check_overlap = TRUE, size = 5) +#
            ggplot2::labs(x = "dC", y = "dE") +#
            ggplot2::ggtitle(expression(paste("Rank Trace Plot for ",#
				 Theta^(0),#
				 " to ",#
				 Theta^(s) )))#
}
pca_rank_trace_plot(turtles_x)
pca_rank_trace_plot <- function(x){#
    rt <- pca_rank_trace(x)#
    ggplot2::ggplot(rt) +#
    dplyr::aes(x = delta_C,#
               y = delta_residuals,#
               label = 0:(dim(rt)[1] - 1))) +#
    ggplot2::lims(x = c(0,1), y = c(0,1)) +#
    ggplot2::geom_line(color = "red") +#
    ggplot2::geom_text(check_overlap = TRUE, size = 5) +#
    ggplot2::labs(x = "dC", y = "dE") +#
    ggplot2::ggtitle(expression(paste("Rank Trace Plot for ",#
                     Theta^(0),#
		     " to ",#
		     Theta^(s) )))#
}
pca_rank_trace_plot <- function(x){#
    rt <- pca_rank_trace(x)#
    ggplot2::ggplot(rt) +#
    dplyr::aes(x = delta_C,#
               y = delta_residuals,#
               label = 0:(dim(rt)[1] - 1)) +#
    ggplot2::lims(x = c(0,1), y = c(0,1)) +#
    ggplot2::geom_line(color = "red") +#
    ggplot2::geom_text(check_overlap = TRUE, size = 5) +#
    ggplot2::labs(x = "dC", y = "dE") +#
    ggplot2::ggtitle(expression(paste("Rank Trace Plot for ",#
                     Theta^(0),#
		     " to ",#
		     Theta^(s) )))#
}
pca_rank_trace_plot(turtles_x)
pca_rank_trace_plot <- function(x){#
    rt <- pca_rank_trace(x)#
    ggplot2::ggplot(rt, aes(delta_C, delta_residuals)) +#
    #dplyr::aes(x = delta_C,#
     #          y = delta_residuals,#
      #         label = 0:(dim(rt)[1] - 1)) +#
    ggplot2::lims(x = c(0,1), y = c(0,1)) +#
    ggplot2::geom_line(color = "red") +#
    #ggplot2::geom_text(check_overlap = TRUE, size = 5) +#
    #ggplot2::labs(x = "dC", y = "dE") +#
    #ggplot2::ggtitle(expression(paste("Rank Trace Plot for ",#
    #                 Theta^(0),#
#		     " to ",#
#		     Theta^(s) )))#
}
pca_rank_trace_plot <- function(x){#
    rt <- pca_rank_trace(x)#
    ggplot2::ggplot(rt, aes(delta_C, delta_residuals)) +#
    #dplyr::aes(x = delta_C,#
     #          y = delta_residuals,#
      #         label = 0:(dim(rt)[1] - 1)) +#
    ggplot2::lims(x = c(0,1), y = c(0,1)) +#
    ggplot2::geom_line(color = "red") #+#
    #ggplot2::geom_text(check_overlap = TRUE, size = 5) +#
    #ggplot2::labs(x = "dC", y = "dE") +#
    #ggplot2::ggtitle(expression(paste("Rank Trace Plot for ",#
    #                 Theta^(0),#
#		     " to ",#
#		     Theta^(s) )))#
}
pca_rank_trace_plot(turtles_x)
?ggplot
?aes
pca_rank_trace_plot <- function(x){#
    rt <- pca_rank_trace(x)#
    ggplot2::ggplot(rt, aes(delta_C, delta_residuals)) +#
    ggplot2::aes(x = delta_C,#
                 y = delta_residuals,#
                 label = 0:(dim(rt)[1] - 1)) +#
    ggplot2::lims(x = c(0,1), y = c(0,1)) +#
    ggplot2::geom_line(color = "red") #+#
    ggplot2::geom_text(check_overlap = TRUE, size = 5) +#
    ggplot2::labs(x = "dC", y = "dE") +#
    ggplot2::ggtitle(expression(paste("Rank Trace Plot for ",#
                     Theta^(0),#
		     " to ",#
		     Theta^(s) )))#
}
pca_rank_trace_plot(turtles_x)
pca_rank_trace_plot <- function(x){#
    rt <- pca_rank_trace(x)#
    ggplot2::ggplot(rt) +#
    ggplot2::aes(x = delta_C,#
                 y = delta_residuals,#
                 label = 0:(dim(rt)[1] - 1)) +#
    ggplot2::lims(x = c(0,1), y = c(0,1)) +#
    ggplot2::geom_line(color = "red") #+#
    ggplot2::geom_text(check_overlap = TRUE, size = 5) +#
    ggplot2::labs(x = "dC", y = "dE") +#
    ggplot2::ggtitle(expression(paste("Rank Trace Plot for ",#
                     Theta^(0),#
		     " to ",#
		     Theta^(s) )))#
}
pca_rank_trace_plot(turtles_x)
pca_rank_trace_plot <- function(x){#
    rt <- pca_rank_trace(x)#
    ggplot2::ggplot(rt) +#
    ggplot2::aes(x = delta_C,#
                 y = delta_residuals,#
                 label = 0:(dim(rt)[1] - 1)) +#
    ggplot2::lims(x = c(0,1), y = c(0,1)) +#
    ggplot2::geom_line(color = "red") #+#
    #ggplot2::geom_text(check_overlap = TRUE, size = 5) +#
    ggplot2::labs(x = "dC", y = "dE") +#
    ggplot2::ggtitle(expression(paste("Rank Trace Plot for ",#
                     Theta^(0),#
		     " to ",#
		     Theta^(s) )))#
}
pca_rank_trace_plot(turtles_x)
pca_rank_trace_plot <- function(x){#
    rt <- pca_rank_trace(x)#
    ggplot2::ggplot(rt) +#
    ggplot2::aes(x = delta_C,#
                 y = delta_residuals,#
                 label = 0:(dim(rt)[1] - 1)) +#
    ggplot2::lims(x = c(0,1), y = c(0,1)) +#
    ggplot2::geom_line(color = "red") #+#
    #ggplot2::geom_text(check_overlap = TRUE, size = 5) +#
    ggplot2::labs(x = "dC", y = "dE") +#
   # ggplot2::ggtitle(expression(paste("Rank Trace Plot for ",#
                     Theta^(0),#
		     " to ",#
		     Theta^(s) )))#
}
pca_rank_trace_plot <- function(x){#
    rt <- pca_rank_trace(x)#
    ggplot2::ggplot(rt) +#
    ggplot2::aes(x = delta_C,#
                 y = delta_residuals,#
                 label = 0:(dim(rt)[1] - 1)) +#
    ggplot2::lims(x = c(0,1), y = c(0,1)) +#
    ggplot2::geom_line(color = "red") +#
    ggplot2::geom_text(check_overlap = TRUE, size = 5) +#
    ggplot2::labs(x = "dC", y = "dE") +#
    ggplot2::ggtitle(expression(paste("Rank Trace Plot for ",#
                     Theta^(0),#
		     " to ",#
		     Theta^(s) )))#
}
pca_rank_trace_plot(turtles_x)
pca_rank_trace <- function(x){#
    eigenvecs <- pca(x)$A#
    eigens <- eigen(cov(x, x))#
    full_rank <- dim(eigens$vectors)[2]#
    delta_C <- function(t){#
        sqrt(1 - t / full_rank)#
    }#
    delta_residuals <- function(t){#
        sqrt((sum(eigens$values[(t+1):full_rank])^2) / sum((eigens$values))^2)#
    }#
    pca_rank_trace_x <- c()#
    pca_rank_trace_y <- c()#
    for(i in 1:full_rank){#
        pca_rank_trace_x[i] <- delta_C(i)#
        pca_rank_trace_y[i] <- delta_residuals(i)#
    }#
    pca_rank_trace_y[length(pca_rank_trace_y)] <- 0#
    dplyr::data_frame(rank = 0:(length(pc_rank_trace_x) - 1),#
                      delta_C = c(1, pca_rank_trace_x),#
                      delta_residuals = c(1, pca_rank_trace_y))#
}#
#
#' PCA Rank Trace Plot#
#'#
#' Plot of rank trace to determine number of principle components to use in reduced-rank PCA.#
#'#
#' @param x data frame or matrix of input variables#
#'#
#' @export#
#
pca_rank_trace_plot <- function(x){#
    rt <- pca_rank_trace(x)#
    ggplot2::ggplot(rt) +#
    ggplot2::aes(x = delta_C,#
                 y = delta_residuals,#
                 label = rank) +#
    ggplot2::lims(x = c(0,1), y = c(0,1)) +#
    ggplot2::geom_line(color = "red") +#
    ggplot2::geom_text(check_overlap = TRUE, size = 5) +#
    ggplot2::labs(x = "dC", y = "dE") +#
    ggplot2::ggtitle(expression(paste("Rank Trace Plot for ",#
                     Theta^(0),#
		     " to ",#
		     Theta^(s) )))#
}
pca_rank_trace_plot(turtles_x)
pca_rank_trace <- function(x){#
    eigenvecs <- pca(x)$A#
    eigens <- eigen(cov(x, x))#
    full_rank <- dim(eigens$vectors)[2]#
    delta_C <- function(t){#
        sqrt(1 - t / full_rank)#
    }#
    delta_residuals <- function(t){#
        sqrt((sum(eigens$values[(t+1):full_rank])^2) / sum((eigens$values))^2)#
    }#
    pca_rank_trace_x <- c()#
    pca_rank_trace_y <- c()#
    for(i in 1:full_rank){#
        pca_rank_trace_x[i] <- delta_C(i)#
        pca_rank_trace_y[i] <- delta_residuals(i)#
    }#
    pca_rank_trace_y[length(pca_rank_trace_y)] <- 0#
    dplyr::data_frame(rank = 0:(length(pca_rank_trace_x) - 1),#
                      delta_C = c(1, pca_rank_trace_x),#
                      delta_residuals = c(1, pca_rank_trace_y))#
}#
#
#' PCA Rank Trace Plot#
#'#
#' Plot of rank trace to determine number of principle components to use in reduced-rank PCA.#
#'#
#' @param x data frame or matrix of input variables#
#'#
#' @export#
#
pca_rank_trace_plot <- function(x){#
    rt <- pca_rank_trace(x)#
    ggplot2::ggplot(rt) +#
    ggplot2::aes(x = delta_C,#
                 y = delta_residuals,#
                 label = rank) +#
    ggplot2::lims(x = c(0,1), y = c(0,1)) +#
    ggplot2::geom_line(color = "red") +#
    ggplot2::geom_text(check_overlap = TRUE, size = 5) +#
    ggplot2::labs(x = "dC", y = "dE") +#
    ggplot2::ggtitle(expression(paste("Rank Trace Plot for ",#
                     Theta^(0),#
		     " to ",#
		     Theta^(s) )))#
}
pca_rank_trace_plot(turtles_x)
pca_rank_trace(turtles_x)
pca_rank_trace <- function(x){#
    eigenvecs <- pca(x)$A#
    eigens <- eigen(cov(x, x))#
    full_rank <- dim(eigens$vectors)[2]#
    delta_C <- function(t){#
        sqrt(1 - t / full_rank)#
    }#
    delta_residuals <- function(t){#
        sqrt((sum(eigens$values[(t+1):full_rank])^2) / sum((eigens$values))^2)#
    }#
    pca_rank_trace_x <- c()#
    pca_rank_trace_y <- c()#
    for(i in 1:full_rank){#
        pca_rank_trace_x[i] <- delta_C(i)#
        pca_rank_trace_y[i] <- delta_residuals(i)#
    }#
    pca_rank_trace_y[length(pca_rank_trace_y)] <- 0#
    dplyr::data_frame(rank = 0:length(pca_rank_trace_x),#
                      delta_C = c(1, pca_rank_trace_x),#
                      delta_residuals = c(1, pca_rank_trace_y))#
}#
#
#' PCA Rank Trace Plot#
#'#
#' Plot of rank trace to determine number of principle components to use in reduced-rank PCA.#
#'#
#' @param x data frame or matrix of input variables#
#'#
#' @export#
#
pca_rank_trace_plot <- function(x){#
    rt <- pca_rank_trace(x)#
    ggplot2::ggplot(rt) +#
    ggplot2::aes(x = delta_C,#
                 y = delta_residuals,#
                 label = rank) +#
    ggplot2::lims(x = c(0,1), y = c(0,1)) +#
    ggplot2::geom_line(color = "red") +#
    ggplot2::geom_text(size = 5) +#
    ggplot2::labs(x = "dC", y = "dE") +#
    ggplot2::ggtitle(expression(paste("Rank Trace Plot for ",#
                     Theta^(0),#
		     " to ",#
		     Theta^(s) )))#
}
pca_rank_trace(turtles_x)
pca_rank_trace_plot(turtles_x)
data(wine)
head(wine)
wine_x <- as_data_frame(wine) %>% dplyr::select(-class, -classdigit)
pca_rank_trace(wine_x)
pca_rank_trace_plot(wine_x)
rrr(turtles_x, turtles_x)
rrr(turtles_x, turtles_x, )
library(microbenchmark)
cva <- function(x, y, rank = "full", type = "cov") {#
	if(type == "cov"){#
		y_c <- scale(y, center = TRUE, scale = FALSE)#
	} else if(type == "cor"){#
		y_c <- scale(y, center = TRUE, scale = TRUE)#
	} else {#
		stop("argument type not recognized")#
	}#
	gamma <- cov_matrix(y_c, y_c)#
	rrr(x, y, gamma, rank, type)#
}#
#
cva2 <- function(x, y, rank = "full", type = "cov") {#
	if(type == "cov"){#
		y_c <- scale(y, center = TRUE, scale = FALSE)#
	} else if(type == "cor"){#
		y_c <- scale(y, center = TRUE, scale = TRUE)#
	} else {#
		stop("argument type not recognized")#
	}#
	gamma <- cov_matrix(y_c, y_c)#
	rrr(x, y, gamma, rank, type)#
}
cva2 <- function(x, y, rank = "full", type = "cov") {#
	if(type == "cov"){#
		y_c <- scale(y, center = TRUE, scale = FALSE)#
	} else if(type == "cor"){#
		y_c <- scale(y, center = TRUE, scale = TRUE)#
	} else {#
		stop("argument type not recognized")#
	}#
	gamma <- cov(y, y)#
	rrr(x, y, gamma, rank, type)#
}
data(COMBO)
data(combo17)
data(COMBO17)
galaxy <- as_data_frame(COMBO17)
galaxy
glimpse(galaxy)
galaxies %>% select(-starts_with("e."))
galaxies %>% select(starts_with("e."))
galaxy %>% select(starts_with("e."))
galaxy %>% select(-starts_with("e."))
galaxy %>% select(-starts_with("e.")) %>% filter()
?filter
str(galaxy)
galaxy %>% select(-starts_with("e.")) %>% na.omit()
galaxy %>% select(-starts_with("e."))
galaxy %>% select(-starts_with("e.")) %>% na.omit()
galaxy %>% select(-starts_with("e."), Nr) %>% na.omit()
galaxy %>% select(-starts_with("e."), -Nr) %>% na.omit()
galaxy %>% select(-starts_with("e."), -Nr, -UFS:IFD) %>% na.omit()
galaxy %>% select(-starts_with("e."), -Nr, -UFS:-IFD) %>% na.omit()
galaxy <- as_data_frame(COMBO17) %>% select(-starts_with("e."), -Nr, -UFS:-IFD) %>% na.omit()
galaxy
galaxy <- as_data_frame(COMBO17) %>% select(-starts_with("e."), -Nr, -UFS:-IFD) %>% na.omit()
galaxy_x <- galaxy %>% select(Rmag:chi2red)
galaxy_y <- galaxy %>% select(Rmag:chi2red)
galaxy_x <- galax
?lm
devtools::install_github("chrisaddy/rrr")
rrr::cva(galaxy_x, galaxy_y)
rrr::cva(galaxy_x, galaxy_y, 2)
galaxy_x <- galax
data(pendigits)
as_data_frame(pendigits)
setwd("rrr")
pkgdown::build_site()
traceback()
?traceback
pkgdown::build_site()
install_github("xml2")
install_github("hadley/xml2")
devtools::install_github("hadley/xml2")
devtools::install_github("hadley/xml2", force = TRUE)
pkgdown::build_site()
traceback()
pkgdown::build_site()
pkgdown::init_site()
pkgdown::build_site()
devtools::check("rrr")
devtools::check()
devtools::check()
devtools::document()
library(rrr)
devtools::check()
devtools::load_all()
devtools::check()
devtools::install()
devtools::check()
devtools::load_all()
devtools::document()
pkgdown::build_site()
list.files()

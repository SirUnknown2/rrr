theta_full <- function(x, y, gamma_mat){
		s <- dim(y)[1]
		rrr(x, y, gamma_mat, s)$C
}

sigma_ee_t <- function(x, y, gamma_mat, rank){
		e <- organize(y) - rrr(x, y, gamma_mat, rank) %*% x
		e %*% t(e) / (dim(x)[1] - dim(x)[2])
}

sigma_ee_full <- function(x, y, gamma_mat){
       			s <- dim(y)[2]
			sigma_ee_t(x, y, gamma_mat, s)
}

delta_C <- function(x, y, gamma_mat, rank){
		theta <- theta_full(x, y, gamma_mat)
		C <- rrr(x, y, gamma_mat, rank)$C
		norm(theta - C, type = "F") / norm(theta, type = "F")
}	

delta_EE <- function(x, y, gamma_mat, rank){
		full <- sigma_ee_full(x, y, gamma_mat)	
		t <- sigma_ee_t(x, y, gamma_mat, rank)
		sig_YY <- cov_mat(y, y)
		norm(full - t, type = "F") / norm(full - sig_YY, type = "F")
}

rank_trace_x <- function(x, y, gamma_mat){
			rt <- c()
			fr <- min(dim(x)[1], dim(y)[1])
			for(i in 1:fr){
				rt[i] <- delta_C(x, y, gamma_mat, i)
			}
			c(1,rt)
}

rank_trace_y <- function(x, y, gamma_mat){
			rt <- c()
			fr <- min(dim(x)[1], dim(y)[1])
			for(i in 1:fr){
				rt[i] <- delta_EE(x, y, gamma_mat, i)
			}
			c(1,rt)
}

#delta_C <- function(x, y, gamma_mat, rank){
#	full_rank <- min(dim(x)[2], dim(y)[2])
#	theta <- rrr(x, y, gamma_mat, full_rank)$C
#	C <- rrr(x, y, gamma_mat, rank)$C
#	sum((theta - C)^2) / sum(theta^2)
#}

#delta_EE <- function(x, y, gamma_mat, rank){
#	full_rank <- min(dim(x)[2], dim(y)[2])
#	y_organize <- organize(y)
#	x_organize <- organize(x)
#	sig_YX <- cov_matrix(y_organize, x_organize)
#	sig_XX <- cov_matrix(x_organize, x_organize)
#	sig_YY <- cov_matrix(y_organize, y_organize)
#	sigma_ee_t <- y_organize - rrr(x, y, gamma_mat, rank)$C %*% x_organize
#	e_full <- rrr_residuals(x, y, gamma_mat, full_rank)
#	sigma_ee_full <- e_full %*% t(e_full)
#	e_t <- rrr_residuals(x, y, gamma_mat, rank)
#	sigma_ee_t <- e_t %*% t(e_t)
#	sum((sigma_ee - sigma_ee_t)^2) / sum((sigma_ee - sig_YY)^2)
#}

#rank_trace <- function(x, y, gamma_mat) {
#	s <- min(dim(x)[2], dim(y)[2])
#	rt_x <- c()
#	rt_y <- c()
#	for(i in 1:s){
#		rt_x[i] <- delta_C(x, y, gamma_mat, i)
#		rt_y[i] <- delta_EE(x, y, gamma_mat, i)
#	}
#	rt_x <- c(1, rt_x)
#	rt_y <- c(1, rt_y)
#	rank <- 0:min(dim(x)[2], dim(y)[2])
#	data_frame(rank = rank,
#		       deltaC = rt_x,
#			   deltaEE = rt_y)
#}

#' Rank Trace Plot
#'
#' Plot of rank trace to determine suitable rank of coefficient matrix.
#'
#' @param x data frame or matrix of input variables
#' @param y data frame or matrix of response variables
#' @param gamma_mat weight matrix
#'
#' @export

rank_trace_plot <- function(x, y, gamma_mat){
#	trace <- rank_trace(x, y, gamma_mat)
	ggplot2::ggplot() +
	ggplot2::aes(x = rank_trace_x(x, y, gamma_mat), #trace$deltaC,
		y = rank_trace_y(x, y, gamma_mat), #trace$deltaEE,
		label = 0:3) +
	ggplot2::lims(x = c(0,1), y = c(0,1)) +
	ggplot2::geom_line(color = "red") +
	ggplot2::geom_text(check_overlap = TRUE, size = 5) +
	ggplot2::geom_label() + 
	ggplot2::labs(x = "dC", y = "dE") +
	ggplot2::ggtitle(expression(paste("Rank Trace Plot for ",
				 Theta^(0),
				 " to ",
				 Theta^(s) )))
}


#' PCA Rank Trace
#'
#' Rank trace coordinates to determine number of principle components to use in reduced-rank PCA.
#'
#' @param x data frame or matrix of input variables
#'
#' @export

pca_rank_trace <- function(x){
    eigenvecs <- pca(x)$A
    eigens <- eigen(cov(x, x))
    full_rank <- dim(eigens$vectors)[2]
    delta_C <- function(t){
        sqrt(1 - t / full_rank)
    }
    delta_residuals <- function(t){
        sqrt((sum(eigens$values[(t+1):full_rank])^2) / sum((eigens$values))^2)
    }
    pca_rank_trace_x <- c()
    pca_rank_trace_y <- c()
    for(i in 1:full_rank){
        pca_rank_trace_x[i] <- delta_C(i)
        pca_rank_trace_y[i] <- delta_residuals(i)
    }
    pca_rank_trace_y[length(pca_rank_trace_y)] <- 0
    dplyr::data_frame(rank = 0:(length(pca_rank_trace_x) - 1),
                      delta_C = c(1, pca_rank_trace_x),
                      delta_residuals = c(1, pca_rank_trace_y))
}

#' PCA Rank Trace Plot
#'
#' Plot of rank trace to determine number of principle components to use in reduced-rank PCA.
#'
#' @param x data frame or matrix of input variables
#'
#' @export

pca_rank_trace_plot <- function(x){
    rt <- pca_rank_trace(x)
    ggplot2::ggplot(rt) +
    ggplot2::aes(x = delta_C,
                 y = delta_residuals,
                 label = rank) +
    ggplot2::lims(x = c(0,1), y = c(0,1)) +
    ggplot2::geom_line(color = "red") +
    ggplot2::geom_text(size = 5) +
    ggplot2::labs(x = "dC", y = "dE") +
    ggplot2::ggtitle(expression(paste("Rank Trace Plot for ",
                     Theta^(0),
		     " to ",
		     Theta^(s) )))
}
